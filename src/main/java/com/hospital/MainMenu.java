package com.hospital;

import com.hospital.dao.*;
import com.hospital.service.AuthService;

import java.sql.Date;
import java.sql.SQLException;
import java.util.List;
import java.util.Scanner;

public class MainMenu {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        while (true) {
            System.out.println("\n=== –ê–ò–° –ë–æ–ª—å–Ω–∏—Ü–∞ ===");
            System.out.println("–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ 0");
            System.out.print("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞ (patient/doctor/medassistant/maindoctor): ");
            String type = scanner.nextLine().trim();
            if ("0".equals(type)) {
                System.out.println("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ.");
                break;
            }

            System.out.print("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: ");
            String username = scanner.nextLine();
            System.out.print("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ");
            String password = scanner.nextLine();

            String role = AuthService.login(username, password);
            if (role == null || !role.equals(type)) {
                System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞, –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                continue;
            }

            System.out.println("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥. –í–∞—à–∞ —Ä–æ–ª—å: " + role);
            switch (role) {
                case "patient" -> showPatientMenu(scanner);
                case "doctor" -> showDoctorMenu(scanner);
                case "medassistant" -> showNurseMenu(scanner);
                case "maindoctor" -> showMainDoctorMenu(scanner);
                default -> System.out.println("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å.");
            }
        }
        scanner.close();
    }

    private static void showPatientMenu(Scanner scanner) {
        PatientDAO patientDAO = new PatientDAO();
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à user_id: ");
        int userId = Integer.parseInt(scanner.nextLine());
        int patientId = patientDAO.getPatientIdByUserId(userId);
        if (patientId == -1) {
            System.out.println("‚ùå –ü–∞—Ü–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º user_id –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            return;
        }
        while (true) {
            System.out.println("\nüìã –ú–µ–Ω—é –ø–∞—Ü–∏–µ–Ω—Ç–∞:");
            System.out.println("1. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é");
            System.out.println("2. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –±–æ–ª–µ–∑–Ω–∏");
            System.out.println("3. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞—Ç—ã –ª–µ—á–µ–Ω–∏—è");
            System.out.println("0. –ù–∞–∑–∞–¥");
            System.out.print("–í—ã–±–æ—Ä: ");
            String choice = scanner.nextLine();
            switch (choice) {
                case "1" -> patientDAO.showPersonalInfo(patientId);
                case "2" -> patientDAO.showMedicalHistory(patientId);
                case "3" -> patientDAO.showMedicalHistory(patientId);
                case "0" -> { return; }
                default -> System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.");
            }
        }
    }

    private static void showDoctorMenu(Scanner scanner) {
        DoctorDAO dao = new DoctorDAO();
        while (true) {
            System.out.println("\nüìã –ú–µ–Ω—é –ª–µ—á–∞—â–µ–≥–æ –≤—Ä–∞—á–∞:");
            System.out.println("1. –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤");
            System.out.println("2. –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤");
            System.out.println("3. –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ä—É—á–µ–Ω–∏—è –¥–ª—è –º–µ–¥—Å–µ—Å—Ç—ë—Ä");
            System.out.println("4. –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ—Ä—É—á–µ–Ω–∏–µ –¥–ª—è –º–µ–¥—Å–µ—Å—Ç—Ä—ã");
            System.out.println("5. –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –ø–æ—Ä—É—á–µ–Ω–∏—è");
            System.out.println("6. –ü–æ–∏—Å–∫ –ø–∞—Ü–∏–µ–Ω—Ç–∞");
            System.out.println("0. –ù–∞–∑–∞–¥");
            System.out.print("–í—ã–±–æ—Ä: ");
            String choice = scanner.nextLine();
            switch (choice) {
                case "1" -> {
                    System.out.println("ü©∫ –°–ø–∏—Å–æ–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤:");
                    dao.getCurrentPatients().forEach(p -> System.out.println("‚Äì " + p));
                }
                case "2" -> System.out.println("üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤: " + dao.getPatientCount());
                case "3" -> {
                    System.out.println("üìñ –ü–æ—Ä—É—á–µ–Ω–∏—è –¥–ª—è –º–µ–¥—Å–µ—Å—Ç—ë—Ä:");
                    dao.getPendingNurseTasks().forEach(t -> System.out.println("‚Äì " + t));
                }
                case "4" -> {
                    System.out.print("–í–≤–µ–¥–∏—Ç–µ nurse_id: ");
                    int nid = Integer.parseInt(scanner.nextLine());
                    System.out.print("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Ä—É—á–µ–Ω–∏—è: ");
                    String desc = scanner.nextLine();
                    dao.addNurseTask(nid, desc);
                }
                case "5" -> {
                    System.out.println("‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –ø–æ—Ä—É—á–µ–Ω–∏—è:");
                    dao.getCompletedNurseTasks().forEach(t -> System.out.println("‚Äì " + t));
                }
                case "6" -> {
                    System.out.print("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞: ");
                    String search = scanner.nextLine();
                    List<Integer> ids = dao.findPatientsByName(search);
                    if (ids.isEmpty()) {
                        System.out.println("–ü–∞—Ü–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
                        break;
                    }
                    System.out.print("–í–≤–µ–¥–∏—Ç–µ ID –ø–∞—Ü–∏–µ–Ω—Ç–∞: ");
                    int pid = Integer.parseInt(scanner.nextLine());
                    while (true) {
                        System.out.println("\nüîç –†–∞–±–æ—Ç–∞ —Å –ø–∞—Ü–∏–µ–Ω—Ç–æ–º ID=" + pid);
                        System.out.println("1. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è");
                        System.out.println("2. –ò—Å—Ç–æ—Ä–∏—è –±–æ–ª–µ–∑–Ω–∏");
                        System.out.println("3. –î–æ–±–∞–≤–∏—Ç—å –¥–∏–∞–≥–Ω–æ–∑");
                        System.out.println("0. –ù–∞–∑–∞–¥");
                        System.out.print("–í—ã–±–æ—Ä: ");
                        String sub = scanner.nextLine();
                        switch (sub) {
                            case "1" -> dao.getPatientInfo(pid);
                            case "2" -> dao.getMedicalHistory(pid);
                            case "3" -> {
                                System.out.print("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–∏–∞–≥–Ω–æ–∑–∞: ");
                                dao.addDiagnosis(pid, scanner.nextLine());
                            }
                            case "0" -> { break; }
                            default -> System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.");
                        }
                        if (sub.equals("0")) break;
                    }
                }
                case "0" -> { return; }
                default -> System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.");
            }
        }
    }

    private static void showNurseMenu(Scanner scanner) {
        NurseDAO nurseDAO = new NurseDAO();
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à nurse_id: ");
        int nurseId = Integer.parseInt(scanner.nextLine());
        while (true) {
            System.out.println("\nüìã –ú–µ–Ω—é –º–µ–¥—Å–µ—Å—Ç—Ä—ã:");
            System.out.println("1. –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –ø–æ—Ä—É—á–µ–Ω–∏—è");
            System.out.println("2. –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ—Ä—É—á–µ–Ω–∏–µ");
            System.out.println("3. –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –ø–æ—Ä—É—á–µ–Ω–∏—è");
            System.out.println("4. –ù–∞–π—Ç–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –ø–æ –∏–º–µ–Ω–∏");
            System.out.println("0. –ù–∞–∑–∞–¥");
            System.out.print("–í—ã–±–æ—Ä: ");
            String choice = scanner.nextLine();
            switch (choice) {
                case "1" -> {
                    System.out.println("üìå –ú–æ–∏ —Ç–µ–∫—É—â–∏–µ –ø–æ—Ä—É—á–µ–Ω–∏—è:");
                    var tasks = nurseDAO.getTasksForNurse(nurseId);
                    if (tasks.isEmpty()) System.out.println("–ù–µ—Ç —Ç–µ–∫—É—â–∏—Ö –ø–æ—Ä—É—á–µ–Ω–∏–π.");
                    else tasks.forEach(t -> System.out.println("‚Äì " + t));
                }
                case "2" -> {
                    System.out.print("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ—Ä—É—á–µ–Ω–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ");
                    nurseDAO.completeTask(Integer.parseInt(scanner.nextLine()));
                }
                case "3" -> {
                    System.out.println("‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –ø–æ—Ä—É—á–µ–Ω–∏—è:");
                    var done = nurseDAO.getCompletedTasksForNurse(nurseId);
                    if (done.isEmpty()) System.out.println("–ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –ø–æ—Ä—É—á–µ–Ω–∏–π.");
                    else done.forEach(t -> System.out.println("‚Äì " + t));
                }
                case "4" -> {
                    System.out.print("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞: ");
                    var results = nurseDAO.findPatientsByName(scanner.nextLine());
                    if (results.isEmpty()) System.out.println("–ü–∞—Ü–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
                    else results.forEach(p -> System.out.println("‚Äì " + p));
                }
                case "0" -> { return; }
                default -> System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.");
            }
        }
    }

    private static void showMainDoctorMenu(Scanner scanner) {
        StaffDAO staffDAO = new StaffDAO();
        UserDAO userDAO = new UserDAO();
        PatientDAO patientDAO = new PatientDAO();

        while (true) {
            System.out.println("\nüìã –ú–µ–Ω—é –≥–ª–∞–≤–≤—Ä–∞—á–∞:");
            System.out.println("1. –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ–¥—Å–µ—Å—Ç—ë—Ä");
            System.out.println("2. –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ª–µ—á–∞—â–∏—Ö –≤—Ä–∞—á–µ–π");
            System.out.println("----------------------------------");
            System.out.println("3. –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞");
            System.out.println("4. –î–æ–±–∞–≤–∏—Ç—å –º–µ–¥—Å–µ—Å—Ç—Ä—É");
            System.out.println("5. –î–æ–±–∞–≤–∏—Ç—å –ª–µ—á–∞—â–µ–≥–æ –≤—Ä–∞—á–∞");
            System.out.println("----------------------------------");
            System.out.println("6. –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤");
            System.out.println("7. –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π");
            System.out.println("8. –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π");
            System.out.println("----------------------------------");
            System.out.println("9. –£–¥–∞–ª–∏—Ç—å –º–µ–¥—Å–µ—Å—Ç—Ä—É");
            System.out.println("10. –£–¥–∞–ª–∏—Ç—å –≤—Ä–∞—á–∞");
            System.out.println("11. –£–¥–∞–ª–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞");
            System.out.println("0. –ù–∞–∑–∞–¥");
            System.out.print("–í—ã–±–æ—Ä: ");
            String choice = scanner.nextLine().trim();

            switch (choice) {
                case "1" -> staffDAO.showNurses();
                case "2" -> staffDAO.showDoctors();
                case "3" -> {
                    System.out.print("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞: ");
                    String login = scanner.nextLine().trim();
                    System.out.print("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ");
                    String pwd = scanner.nextLine().trim();
                    if (login.isEmpty() || pwd.isEmpty() || login.contains(" ") || pwd.contains(" ")) {
                        System.out.println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞");
                        continue;
                    }

                    try {
                        System.out.print("–§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞: ");
                        String fn = scanner.nextLine().trim();
                        if (fn.isEmpty()) {
                            throw new IllegalArgumentException("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û");
                        }
                        System.out.print("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î): ");
                        Date bd = Date.valueOf(scanner.nextLine());
                        System.out.print("–†–æ—Å—Ç (—Å–º): ");
                        int height = Integer.parseInt(scanner.nextLine());
                        if (height <= 0) {
                            throw new IllegalArgumentException("–†–æ—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –∏–ª–∏ –Ω–æ–ª—å");
                        }
                        System.out.print("–í–µ—Å (–∫–≥): ");
                        int weight = Integer.parseInt(scanner.nextLine());
                        if (weight <= 0) {
                            throw new IllegalArgumentException("–í–µ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –∏–ª–∏ –Ω–æ–ª—å");
                        }
                        System.out.print("–ì—Ä—É–ø–ø–∞ –∫—Ä–æ–≤–∏ (0, A, B, AB): ");
                        String bg = scanner.nextLine().trim().toUpperCase();
                        if (!bg.equals("A") && !bg.equals("B") && !bg.equals("0") && !bg.equals("AB")) {
                            throw new IllegalArgumentException("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥—Ä—É–ø–ø—ã–µ –∫—Ä–æ–≤–∏");
                        }
                        System.out.print("–†–µ–∑—É—Å (+ –∏–ª–∏ -): ");
                        String res = scanner.nextLine().trim();
                        if (!res.equals("+") && !res.equals("-")) {
                            throw new IllegalArgumentException("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É—Å —Ñ–∞–∫—Ç–æ—Ä–∞");
                        }
                        int uid = userDAO.createUser(login, pwd, "patient");
                        if (uid < 0) {
                            throw new IllegalArgumentException("–¢–∞–∫–æ–π –ª–æ–≥–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
                        }
                        patientDAO.createPatient(uid, fn, bd, height, weight, bg, res);
                    } catch (Exception e) {
                        if (e.getMessage() == null) System.out.println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã");
                        else System.out.println(e.getMessage());
                    }

                }
                case "4" -> {
                    System.out.print("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è –º–µ–¥—Å–µ—Å—Ç—Ä—ã: ");
                    String login = scanner.nextLine().trim();
                    System.out.print("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ");
                    String pwd = scanner.nextLine().trim();
                    if (login.isEmpty() || login.isEmpty() || login.contains(" ") || pwd.contains(" ")) {
                        System.out.println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞");
                        continue;
                    }
                    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ nurses
                    try {
                        System.out.print("–§–ò–û: ");
                        String fn = scanner.nextLine().trim();
                        if (fn.isEmpty()) {
                            throw new IllegalArgumentException("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û");
                        }
                        System.out.print("–î–∞—Ç–∞ –ø—Ä–∏—ë–º–∞ (–ì–ì–ì–ì-–ú–ú-–î–î): ");
                        Date hd = Date.valueOf(scanner.nextLine().trim());
                        System.out.print("–ó–∞—Ä–ø–ª–∞—Ç–∞: ");
                        double sal = Double.parseDouble(scanner.nextLine());
                        if (sal <= 0) {
                            throw new IllegalArgumentException("–ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –∏–ª–∏ –Ω–æ–ª—å");
                        }
                        int uid = userDAO.createUser(login, pwd, "medassistant");
                        if (uid < 0) {
                            throw new IllegalArgumentException("–¢–∞–∫–æ–π –ª–æ–≥–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
                        }
                        staffDAO.addNurse(uid, fn, hd, sal);
                    } catch (Exception e) {
                        System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ.");
                    }
                }
                case "5" -> {
                    System.out.print("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è –¥–æ–∫—Ç–æ—Ä–∞: ");
                    String login = scanner.nextLine().trim();
                    System.out.print("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ");
                    String pwd = scanner.nextLine().trim();
                    if (login.isEmpty() || login.isEmpty() || login.contains(" ") || pwd.contains(" ")) {
                        System.out.println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞");
                        continue;
                    }
                    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ doctors
                    try {
                        System.out.print("–§–ò–û: ");
                        String fn = scanner.nextLine().trim();
                        if (fn.isEmpty()) {
                            throw new IllegalArgumentException("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û");
                        }
                        System.out.print("–î–∞—Ç–∞ –ø—Ä–∏—ë–º–∞ (–ì–ì–ì–ì-–ú–ú-–î–î): ");
                        Date hd = Date.valueOf(scanner.nextLine().trim());
                        System.out.print("–ó–∞—Ä–ø–ª–∞—Ç–∞: ");
                        double sal = Double.parseDouble(scanner.nextLine());
                        if (sal <= 0) {
                            throw new IllegalArgumentException("–ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –∏–ª–∏ –Ω–æ–ª—å");
                        }
                        int uid = userDAO.createUser(login, pwd, "doctor");
                        if (uid < 0) {
                            throw new IllegalArgumentException("–¢–∞–∫–æ–π –ª–æ–≥–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
                        }
                        staffDAO.addDoctor(uid, fn, hd, sal);
                    } catch (Exception e) {
                        System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ.");
                    }
                }
                case "6" -> System.out.println("üî¢ –í—Å–µ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤: " + staffDAO.getPatientCount());
                case "7" -> System.out.println("üöÄ –ú–∞–∫—Å. –∑–∞—Ä–ø–ª–∞—Ç–∞: " + staffDAO.getMaxSalaryStaff());
                case "8" -> System.out.println("üê¢ –ú–∏–Ω. –∑–∞—Ä–ø–ª–∞—Ç–∞: " + staffDAO.getMinSalaryStaff());
                case "9" -> {
                    try {
                        System.out.print("–í–≤–µ–¥–∏—Ç–µ user_id –º–µ–¥—Å–µ—Å—Ç—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ");
                        int uid = Integer.parseInt(scanner.nextLine());
                        staffDAO.deleteNurse(uid);
                    } catch (Exception e) {
                        System.out.println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id");
                    }
                }
                case "10" -> {
                    try {
                        System.out.print("–í–≤–µ–¥–∏—Ç–µ user_id –≤—Ä–∞—á–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ");
                        int uid = Integer.parseInt(scanner.nextLine());
                        staffDAO.deleteDoctor(uid);
                    } catch (Exception e) {
                        System.out.println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id");
                    }
                }
                case "11" -> {
                    try {
                        System.out.print("–í–≤–µ–¥–∏—Ç–µ user_id –ø–∞—Ü–∏–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ");
                        int uid = Integer.parseInt(scanner.nextLine());
                        patientDAO.deletePatient(uid);
                    } catch (Exception e) {
                        System.out.println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id");
                    }
                }

                case "0" -> {
                    return;
                }
                default -> System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.");
            }
        }
    }
}
