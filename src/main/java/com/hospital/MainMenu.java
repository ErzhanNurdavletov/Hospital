package com.hospital;

import com.hospital.service.AuthService;
import com.hospital.dao.StaffDAO;
import com.hospital.dao.DoctorDAO;
import com.hospital.dao.NurseDAO;
import com.hospital.dao.PatientDAO;
import com.hospital.dao.UserDAO;

import java.sql.Date;
import java.util.List;
import java.util.Scanner;

public class MainMenu {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\n=== –ê–ò–° ¬´–ë–æ–ª—å–Ω–∏—Ü–∞¬ª ===");
            System.out.println("0. –í—ã—Ö–æ–¥");
            System.out.print("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞ (patient/doctor/medassistant/maindoctor): ");
            String type = scanner.nextLine().trim().toLowerCase();
            if ("0".equals(type)) {
                System.out.println("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
                break;
            }

            System.out.print("–õ–æ–≥–∏–Ω: ");
            String login = scanner.nextLine().trim();
            System.out.print("–ü–∞—Ä–æ–ª—å: ");
            String pass = scanner.nextLine().trim();

            String role = AuthService.login(login, pass);
            if (role == null || !role.equals(type)) {
                System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞, –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.");
                continue;
            }
            UserDAO userDAO = new UserDAO();
            int currentUserId = userDAO.getUserIdByUsername(login);

            switch (role) {
                case "patient"      -> showPatientMenu(scanner, currentUserId);
                case "doctor"       -> showDoctorMenu(scanner);
                case "medassistant" -> showNurseMenu(scanner, currentUserId);
                case "maindoctor"   -> showMainDoctorMenu(scanner);
                default               -> System.out.println("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å.");
            }
        }
        scanner.close();
    }

    private static void showPatientMenu(Scanner scanner, int userId) {
        PatientDAO patientDAO = new PatientDAO();

        int patientId = patientDAO.getPatientIdByUserId(userId);
        if (patientId < 0) {
            System.out.println("‚ùå –ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            return;
        }
        while (true) {
            System.out.println("\n--- –ú–µ–Ω—é –ø–∞—Ü–∏–µ–Ω—Ç–∞ ---");
            System.out.println("1. –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π –¥–∏–∞–≥–Ω–æ–∑");
            System.out.println("2. –ü–æ–∫–∞–∑–∞—Ç—å –º–æ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é");
            System.out.println("0. –ù–∞–∑–∞–¥");
            System.out.print("–í—ã–±–æ—Ä: ");
            String choice = scanner.nextLine().trim();
            if ("0".equals(choice)) break;
            switch (choice) {
                case "1" -> {
                    String diag = patientDAO.getLatestDiagnosis(patientId);
                    System.out.println(diag == null ? "–ù–µ—Ç –¥–∏–∞–≥–Ω–æ–∑–æ–≤." : "üîç –í–∞—à –¥–∏–∞–≥–Ω–æ–∑: " + diag);
                }
                case "2" -> patientDAO.showPersonalInfo(patientId);
                default  -> System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.");
            }
        }
    }

    private static void showDoctorMenu(Scanner scanner) {
        DoctorDAO dao       = new DoctorDAO();
        StaffDAO staffDAO = new StaffDAO();
        while (true) {
            System.out.println("\n--- –ú–µ–Ω—é –ª–µ—á–∞—â–µ–≥–æ –≤—Ä–∞—á–∞ ---");
            System.out.println("1. –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤");
            System.out.println("2. –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏–æ—Å–∫ –º–µ–¥—Å–µ—Å—Ç–µ—Ä");
            System.out.println("3. –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ—Ä—É—á–µ–Ω–∏–µ –¥–ª—è –º–µ–¥—Å–µ—Å—Ç—Ä—ã");
            System.out.println("4. –ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –ø–æ—Ä—É—á–µ–Ω–∏—è");
            System.out.println("5. –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –ø–æ—Ä—É—á–µ–Ω–∏—è");
            System.out.println("6. –ü–æ–∏—Å–∫ –ø–∞—Ü–∏–µ–Ω—Ç–∞");
            System.out.println("0. –ù–∞–∑–∞–¥");
            System.out.print("–í—ã–±–æ—Ä: ");
            String c = scanner.nextLine().trim();
            if ("0".equals(c)) break;
            switch (c) {
                case "1" -> dao.getCurrentPatients().forEach(p -> System.out.println("‚Äì " + p));
                case "2" -> staffDAO.showNurses();
                case "3" -> {
                    int nid;
                    while (true) {
                        System.out.print("–í–≤–µ–¥–∏—Ç–µ user_id –º–µ–¥—Å–µ—Å—Ç—Ä—ã: ");
                        try { nid = Integer.parseInt(scanner.nextLine().trim()); break; }
                        catch (NumberFormatException e) { System.out.println("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID."); }
                    }
                    System.out.print("–¢–µ–∫—Å—Ç –ø–æ—Ä—É—á–µ–Ω–∏—è: ");
                    String desc = scanner.nextLine().trim();
                    if (!desc.isEmpty()) dao.addNurseTask(nid, desc);
                    else System.out.println("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
                }
                case "4" -> dao.getPendingNurseTasks().forEach(t -> System.out.println("‚Äì " + t));
                case "5" -> dao.getCompletedNurseTasks().forEach(t -> System.out.println("‚Äì " + t));
                case "6" -> {
                    PatientDAO patDao = new PatientDAO();

                    // 1) –í–≤–æ–¥ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ user_id
                    int pid;
                    while (true) {
                        System.out.print("–í–≤–µ–¥–∏—Ç–µ user_id –ø–∞—Ü–∏–µ–Ω—Ç–∞: ");
                        String line = scanner.nextLine().trim();
                        try {
                            pid = Integer.parseInt(line);
                            if (patDao.getPatientIdByUserId(pid) < 0) {
                                System.out.println("‚ùå –ü–∞—Ü–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º user_id –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                                continue;
                            }
                            break;
                        } catch (NumberFormatException e) {
                            System.out.println("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.");
                        }
                    }

                    // 2) –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –¥–∏–∞–≥–Ω–æ–∑–æ–≤
                    List<String> allowed = dao.getAllowedDiagnoses();
                    if (allowed.isEmpty()) {
                        System.out.println("‚ùå –°–ø–∏—Å–æ–∫ –¥–∏–∞–≥–Ω–æ–∑–æ–≤ –ø—É—Å—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.");
                        break;
                    }

                    // 3) –ü–æ–¥–º–µ–Ω—é –ø–∞—Ü–∏–µ–Ω—Ç–∞
                    while (true) {
                        System.out.println("\n--- –†–∞–±–æ—Ç–∞ —Å –ø–∞—Ü–∏–µ–Ω—Ç–æ–º user_id=" + pid + " ---");
                        System.out.println("1. –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é");
                        System.out.println("2. –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –±–æ–ª–µ–∑–Ω–∏");
                        System.out.println("3. –î–æ–±–∞–≤–∏—Ç—å –¥–∏–∞–≥–Ω–æ–∑");
                        System.out.println("0. –ù–∞–∑–∞–¥");
                        System.out.print("–í—ã–±–æ—Ä: ");
                        String sub = scanner.nextLine().trim();

                        switch (sub) {
                            case "1" -> patDao.showPersonalInfo(patDao.getPatientIdByUserId(pid));
                            case "2" -> patDao.showMedicalHistory(patDao.getPatientIdByUserId(pid));
                            case "3" -> {
                                System.out.println("–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∏–∞–≥–Ω–æ–∑—ã:");
                                allowed.forEach(d -> System.out.println("‚Äì " + d));

                                System.out.print("–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–≥–Ω–æ–∑ –∏–∑ —Å–ø–∏—Å–∫–∞: ");
                                String diag = scanner.nextLine().trim();
                                if (allowed.contains(diag)) {
                                    dao.addDiagnosis(patDao.getPatientIdByUserId(pid), diag);
                                } else {
                                    System.out.println("‚ùå –¢–∞–∫–æ–≥–æ –¥–∏–∞–≥–Ω–æ–∑–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.");
                                }
                            }
                            case "0" -> { break; }
                            default  -> System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.");
                        }

                        if ("0".equals(sub)) break;
                    }
                }


                default -> System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.");
            }
        }
    }

    private static void showNurseMenu(Scanner scanner, int currentUserId) {
        NurseDAO dao = new NurseDAO();
        int nurseId = 0;
        try {
            nurseId = dao.getNurseIdByUserId(currentUserId);
        } catch (Exception e) {
            System.out.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ nurse id");
        }
        if (nurseId < 0) {
            System.out.println("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –º–µ–¥—Å–µ—Å—Ç—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            return;
        }

        while (true) {
            System.out.println("\n--- –ú–µ–Ω—é –º–µ–¥—Å–µ—Å—Ç—Ä—ã ---");
            System.out.println("1. –ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –ø–æ—Ä—É—á–µ–Ω–∏—è");
            System.out.println("2. –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ—Ä—É—á–µ–Ω–∏–µ");
            System.out.println("3. –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –ø–æ—Ä—É—á–µ–Ω–∏—è");
            System.out.println("0. –ù–∞–∑–∞–¥");
            System.out.print("–í—ã–±–æ—Ä: ");
            String c = scanner.nextLine().trim();
            if ("0".equals(c)) break;
            switch (c) {
//                case "1" -> {
//                    System.out.print("–ß–∞—Å—Ç—å –∏–º–µ–Ω–∏: ");
//                    String part = scanner.nextLine().trim();
//                    if (!part.isEmpty()) dao.findPatientsByName(part).forEach(p -> System.out.println("‚Äì " + p));
//                    else System.out.println("‚ùå –°—Ç—Ä–æ–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É—Å—Ç–æ–π.");
//                }
                case "1" -> dao.getTasksForNurse(nurseId).forEach(t -> System.out.println("‚Äì " + t));
                case "2" -> {
                    int tid;
                    while (true) {
                        System.out.print("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ—Ä—É—á–µ–Ω–∏—è: ");
                        try { tid = Integer.parseInt(scanner.nextLine().trim()); break; }
                        catch (NumberFormatException e) { System.out.println("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID."); }
                    }
                    dao.completeTask(tid);
                }
                case "3" -> dao.getCompletedTasksForNurse(nurseId).forEach(t -> System.out.println("‚Äì " + t));
                default -> System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.");
            }
        }
    }

    private static void showMainDoctorMenu(Scanner scanner) {
        StaffDAO staffDAO = new StaffDAO();
        PatientDAO patientDAO = new PatientDAO();
        UserDAO userDAO = new UserDAO();

        while (true) {
            System.out.println("\n--- –ú–µ–Ω—é –≥–ª–∞–≤–≤—Ä–∞—á–∞ ---");
            System.out.println("1. –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ–¥—Å–µ—Å—Ç—ë—Ä");
            System.out.println("2. –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ª–µ—á–∞—â–∏—Ö –≤—Ä–∞—á–µ–π");
            System.out.println("3. –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤");
            System.out.println("4. –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π");
            System.out.println("5. –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π");
            System.out.println("6. –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞");
            System.out.println("7. –î–æ–±–∞–≤–∏—Ç—å –º–µ–¥—Å–µ—Å—Ç—Ä—É");
            System.out.println("8. –î–æ–±–∞–≤–∏—Ç—å –ª–µ—á–∞—â–µ–≥–æ –≤—Ä–∞—á–∞");
            System.out.println("9. –£–¥–∞–ª–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞");
            System.out.println("10. –£–¥–∞–ª–∏—Ç—å –º–µ–¥—Å–µ—Å—Ç—Ä—É");
            System.out.println("11. –£–¥–∞–ª–∏—Ç—å –ª–µ—á–∞—â–µ–≥–æ –≤—Ä–∞—á–∞");
            System.out.println("0. –ù–∞–∑–∞–¥");
            System.out.print("–í—ã–±–æ—Ä: ");
            String choice = scanner.nextLine().trim();
            if ("0".equals(choice)) return;
            switch (choice) {
                case "1" -> staffDAO.showNurses();
                case "2" -> staffDAO.showDoctors();
                case "3" -> patientDAO.getAllPatients().forEach(p -> System.out.println("‚Äì " + p));
                case "4" -> System.out.println(staffDAO.getMaxSalaryStaff());
                case "5" -> System.out.println(staffDAO.getMinSalaryStaff());
                case "6" -> {
                    // –°–Ω–∞—á–∞–ª–∞ –≤–≤–æ–¥ –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–∞
                    String fullName;
                    while (true) {
                        System.out.print("–§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞: ");
                        try {
                            fullName = scanner.nextLine().trim();
                            if (fullName.isBlank()) throw new IllegalArgumentException();
                            break;

                        } catch (Exception e) {
                            System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û");
                        }
                    }

                    Date birthDate;
                    while (true) {
                        System.out.print("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î): ");
                        try {
                            birthDate = Date.valueOf(scanner.nextLine().trim());
                            break;
                        } catch (IllegalArgumentException e) {
                            System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.");
                        }
                    }
                    int height;
                    while (true) {
                        System.out.print("–†–æ—Å—Ç (—Å–º, >0): ");
                        try {
                            height = Integer.parseInt(scanner.nextLine().trim());
                            if (height > 0) break;
                            else System.out.println("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.");
                        } catch (NumberFormatException e) {
                            System.out.println("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.");
                        }
                    }
                    int weight;
                    while (true) {
                        System.out.print("–í–µ—Å (–∫–≥, >0): ");
                        try {
                            weight = Integer.parseInt(scanner.nextLine().trim());
                            if (weight > 0) break;
                            else System.out.println("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.");
                        } catch (NumberFormatException e) {
                            System.out.println("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.");
                        }
                    }

                    String bloodGroup;
                    while (true) {
                        System.out.print("–ì—Ä—É–ø–ø–∞ –∫—Ä–æ–≤–∏: ");
                        try {
                            bloodGroup = scanner.nextLine().trim();
                            if (bloodGroup.isBlank()) throw new IllegalArgumentException();
                            break;
                        } catch (Exception e) {
                            System.out.println("‚ùå –û—à–∏–±–∫–∞");
                        }
                    }

                    String rhesus;
                    while (true) {
                        System.out.print("–†–µ–∑—É—Å: ");
                        try {
                            rhesus = scanner.nextLine().trim();
                            if (rhesus.isBlank()) throw new IllegalArgumentException();
                            break;
                        } catch (Exception e) {
                            System.out.println("‚ùå –û—à–∏–±–∫–∞");
                        }
                    }

                    // –ü–æ—Å–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–µ–º —É—á—ë—Ç–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º
                    int uid = -1;
                    while (uid < 0) {
                        System.out.print("–õ–æ–≥–∏–Ω –ø–∞—Ü–∏–µ–Ω—Ç–∞: ");
                        String login = scanner.nextLine().trim();
                        System.out.print("–ü–∞—Ä–æ–ª—å: ");
                        String pwd = scanner.nextLine().trim();
                        if (login.isBlank() || pwd.isBlank()) {
                            System.out.println("‚ùå –û—à–∏–±–∫–∞");
                            continue;
                        }
                        uid = userDAO.createUser(login, pwd, "patient");
                        if (uid < 0) System.out.println("‚ùå –õ–æ–≥–∏–Ω –∑–∞–Ω—è—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.");
                    }
                    patientDAO.createPatient(uid, fullName, birthDate, height, weight, bloodGroup, rhesus);
                }
                case "7" -> {
                    // –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–µ–¥—Å–µ—Å—Ç—Ä—ã
                    System.out.print("–§–ò–û –º–µ–¥—Å–µ—Å—Ç—Ä—ã: ");
                    String fullName = scanner.nextLine().trim();
                    Date hireDate;
                    while (true) {
                        System.out.print("–î–∞—Ç–∞ –ø—Ä–∏—ë–º–∞ (–ì–ì–ì–ì-–ú–ú-–î–î): ");
                        try {
                            hireDate = Date.valueOf(scanner.nextLine().trim());
                            break;
                        } catch (IllegalArgumentException e) {
                            System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.");
                        }
                    }
                    double salary;
                    while (true) {
                        System.out.print("–ó–∞—Ä–ø–ª–∞—Ç–∞ (>0): ");
                        try {
                            salary = Double.parseDouble(scanner.nextLine().trim());
                            if (salary > 0) break;
                            else System.out.println("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.");
                        } catch (NumberFormatException e) {
                            System.out.println("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.");
                        }
                    }

                    // –°–æ–∑–¥–∞–Ω–∏–µ —É—á—ë—Ç–∫–∏ –º–µ–¥—Å–µ—Å—Ç—Ä—ã
                    int uid = -1;
                    while (uid < 0) {
                        System.out.print("–õ–æ–≥–∏–Ω –º–µ–¥—Å–µ—Å—Ç—Ä—ã: ");
                        String login = scanner.nextLine().trim();
                        System.out.print("–ü–∞—Ä–æ–ª—å: ");
                        String pwd = scanner.nextLine().trim();
                        uid = userDAO.createUser(login, pwd, "medassistant");
                        if (uid < 0) System.out.println("‚ùå –õ–æ–≥–∏–Ω –∑–∞–Ω—è—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.");
                    }
                    staffDAO.addNurse(uid, fullName, hireDate, salary);
                }
                case "8" -> {
                    // –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä–∞—á–∞
                    System.out.print("–§–ò–û –≤—Ä–∞—á–∞: ");
                    String fullName = scanner.nextLine().trim();
                    Date hireDate;
                    while (true) {
                        System.out.print("–î–∞—Ç–∞ –ø—Ä–∏—ë–º–∞ (–ì–ì–ì–ì-–ú–ú-–î–î): ");
                        try {
                            hireDate = Date.valueOf(scanner.nextLine().trim());
                            break;
                        } catch (IllegalArgumentException e) {
                            System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.");
                        }
                    }
                    double salary;
                    while (true) {
                        System.out.print("–ó–∞—Ä–ø–ª–∞—Ç–∞ (>0): ");
                        try {
                            salary = Double.parseDouble(scanner.nextLine().trim());
                            if (salary > 0) break;
                            else System.out.println("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.");
                        } catch (NumberFormatException e) {
                            System.out.println("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.");
                        }
                    }

                    // –°–æ–∑–¥–∞–Ω–∏–µ —É—á—ë—Ç–∫–∏ –≤—Ä–∞—á–∞
                    int uid = -1;
                    while (uid < 0) {
                        System.out.print("–õ–æ–≥–∏–Ω –≤—Ä–∞—á–∞: ");
                        String login = scanner.nextLine().trim();
                        System.out.print("–ü–∞—Ä–æ–ª—å: ");
                        String pwd = scanner.nextLine().trim();
                        uid = userDAO.createUser(login, pwd, "doctor");
                        if (uid < 0) System.out.println("‚ùå –õ–æ–≥–∏–Ω –∑–∞–Ω—è—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.");
                    }
                    staffDAO.addDoctor(uid, fullName, hireDate, salary);
                }
                case "9" -> {
                    int uid;
                    while (true) {
                        System.out.print("–í–≤–µ–¥–∏—Ç–µ user_id –ø–∞—Ü–∏–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ");
                        try { uid = Integer.parseInt(scanner.nextLine().trim()); break;}
                        catch (NumberFormatException e) { System.out.println("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ."); }
                    }
                    patientDAO.deletePatient(uid);
                }
                case "10" -> {
                    int uid;
                    while (true) {
                        System.out.print("–í–≤–µ–¥–∏—Ç–µ user_id –º–µ–¥—Å–µ—Å—Ç—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ");
                        try { uid = Integer.parseInt(scanner.nextLine().trim()); break; }
                        catch (NumberFormatException e) { System.out.println("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ."); }
                    }
                    try {
                        staffDAO.deleteNurseCascade(uid);
                    } catch (Exception e) {
                        System.out.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è –º–µ–¥—Å–µ—Å—Ç—Ä—ã");
                    }
                }
                case "11" -> {
                    int uid;
                    while (true) {
                        System.out.print("–í–≤–µ–¥–∏—Ç–µ user_id –≤—Ä–∞—á–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ");
                        try { uid = Integer.parseInt(scanner.nextLine().trim()); break; }
                        catch (NumberFormatException e) { System.out.println("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ."); }
                    }
                    staffDAO.deleteDoctor(uid);
                }
                default -> System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.");
            }
        }
    }
}